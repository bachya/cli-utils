var search_data = {"index":{"searchIndex":["cliutils","configuration","configurator","loggerdelegator","messenging","prefs","prettyio","hash","logger","string","add_section()","ask()","attach()","blue()","color_chart()","colorize()","configuration()","custom_level()","cyan()","debug()","deep_merge!()","deep_stringify_keys()","deep_stringify_keys!()","deep_symbolize_keys()","deep_symbolize_keys!()","deep_transform_keys()","deep_transform_keys!()","default_instance()","delegate()","delete_section()","detach()","error()","green()","included()","included()","included()","info()","info_block()","ingest_prefs()","load_configuration()","log()","messenger()","method_missing()","new()","new()","new()","prompt()","purple()","red()","reset()","save()","section()","section_block()","success()","warn()","white()","wrap()","wrap_at()","wrap_limit()","yellow()","readme"],"longSearchIndex":["cliutils","cliutils::configuration","cliutils::configurator","cliutils::loggerdelegator","cliutils::messenging","cliutils::prefs","cliutils::prettyio","hash","logger","string","cliutils::configurator#add_section()","cliutils::prefs#ask()","cliutils::loggerdelegator#attach()","string#blue()","cliutils::prettyio#color_chart()","string#colorize()","cliutils::configuration#configuration()","logger::custom_level()","string#cyan()","cliutils::prettyio#debug()","hash#deep_merge!()","hash#deep_stringify_keys()","hash#deep_stringify_keys!()","hash#deep_symbolize_keys()","hash#deep_symbolize_keys!()","hash#deep_transform_keys()","hash#deep_transform_keys!()","cliutils::messenging#default_instance()","cliutils::loggerdelegator::delegate()","cliutils::configurator#delete_section()","cliutils::loggerdelegator#detach()","cliutils::prettyio#error()","string#green()","cliutils::configuration::included()","cliutils::messenging::included()","cliutils::prettyio::included()","cliutils::prettyio#info()","cliutils::prettyio#info_block()","cliutils::configurator#ingest_prefs()","cliutils::configuration#load_configuration()","cliutils::prettyio#log()","cliutils::messenging#messenger()","cliutils::configurator#method_missing()","cliutils::configurator::new()","cliutils::loggerdelegator::new()","cliutils::prefs::new()","cliutils::prettyio#prompt()","string#purple()","string#red()","cliutils::configurator#reset()","cliutils::configurator#save()","cliutils::prettyio#section()","cliutils::prettyio#section_block()","cliutils::prettyio#success()","cliutils::prettyio#warn()","string#white()","cliutils::prettyio::wrap()","cliutils::prettyio::wrap_at()","cliutils::prettyio::wrap_limit()","string#yellow()",""],"info":[["CLIUtils","","CLIUtils.html","",""],["CLIUtils::Configuration","","CLIUtils/Configuration.html","","<p>\n<p>Configuration Class\n<p>Manages any configuration values and the flat YAML file into which they get\nstored. …\n"],["CLIUtils::Configurator","","CLIUtils/Configurator.html","","<p>\n<p>Configuration Class\n<p>Manages any configuration values and the flat YAML file into which they get\nstored. …\n"],["CLIUtils::LoggerDelegator","","CLIUtils/LoggerDelegator.html","","<p>\n<p>LoggerDelegator Class\n<p>Manages any configuration values and the flat YAML file into which they get\nstored. …\n"],["CLIUtils::Messenging","","CLIUtils/Messenging.html","","<p>\n<p>CLIMessenger Module Outputs color-coordinated messages to a CLI\n<p>\n"],["CLIUtils::Prefs","","CLIUtils/Prefs.html","","<p>\n<p>PrefManager Class\n<p>Engine to derive preferences from a YAML file, deliver those to a user via\na prompt, …\n"],["CLIUtils::PrettyIO","","CLIUtils/PrettyIO.html","","<p>\n<p>CLIMessenger Module Outputs color-coordinated messages to a CLI\n<p>\n"],["Hash","","Hash.html","","<p>\n<p>Hash Class\n<p>Contains many convenient methods borred from Rails\napi.rubyonrails.org/classes/Hash.html\n"],["Logger","","Logger.html","","<p>\n<p>Logger Class\n<p>\n"],["String","","String.html","","<p>\n<p>String Class\n<p>\n"],["add_section","CLIUtils::Configurator","CLIUtils/Configurator.html#method-i-add_section","(section_name)","<p>add_section method\n<p>Adds a new section to the config file (if it doesn&#39;t already exist).\n@param section_name …\n"],["ask","CLIUtils::Prefs","CLIUtils/Prefs.html#method-i-ask","()","<p>ask method\n<p>Runs through all of the prompt questions and collects answers from the\nuser. Note that all …\n"],["attach","CLIUtils::LoggerDelegator","CLIUtils/LoggerDelegator.html#method-i-attach","(target)","<p>attach method\n<p>Attaches a new target to delegate to. @return void\n"],["blue","String","String.html#method-i-blue","()",""],["color_chart","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-color_chart","()","<p>color_chart method\n<p>Displays a chart of all the possible ANSI foreground and background color\ncombinations. …\n"],["colorize","String","String.html#method-i-colorize","(color_code)","<p>\n<p>Color String Methods\n<p>\n"],["configuration","CLIUtils::Configuration","CLIUtils/Configuration.html#method-i-configuration","()","<p>configuration method\n<p>Singleton method to return (or initialize, if needed) a Configurator.\n@return Configurator …\n"],["custom_level","Logger","Logger.html#method-c-custom_level","(tag)","<p>custom_level method\n<p>Creates a custom Logger level based on the passed tag. @param tag The\nLogger level …\n"],["cyan","String","String.html#method-i-cyan","()",""],["debug","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-debug","(m)","<p>debug method\n<p>Empty method so that Messenging doesn&#39;t freak out when passed a debug\nmessage. @return …\n"],["deep_merge!","Hash","Hash.html#method-i-deep_merge-21","(other_hash, &block)","<p>\n<p>Methods\n<p>\n"],["deep_stringify_keys","Hash","Hash.html#method-i-deep_stringify_keys","()","<p>deep_stringify_keys method\n<p>Recursively turns all Hash keys into strings and returns the new Hash.\n@return …\n"],["deep_stringify_keys!","Hash","Hash.html#method-i-deep_stringify_keys-21","()","<p>deep_symbolize_keys! method\n<p>Same as deep_stringify_keys, but destructively alters the original Hash.\n@return …\n"],["deep_symbolize_keys","Hash","Hash.html#method-i-deep_symbolize_keys","()","<p>deep_symbolize_keys method\n<p>Recursively turns all Hash keys into symbols and returns the new Hash.\n@return …\n"],["deep_symbolize_keys!","Hash","Hash.html#method-i-deep_symbolize_keys-21","()","<p>deep_symbolize_keys! method\n<p>Same as deep_symbolize_keys, but destructively alters the original Hash.\n@return …\n"],["deep_transform_keys","Hash","Hash.html#method-i-deep_transform_keys","(&block)","<p>deep_transform_keys method\n<p>Generic method to perform recursive operations on a Hash. @return Hash\n"],["deep_transform_keys!","Hash","Hash.html#method-i-deep_transform_keys-21","(&block)","<p>deep_transform_keys! method\n<p>Same as deep_transform_keys, but destructively alters the original Hash.\n@return …\n"],["default_instance","CLIUtils::Messenging","CLIUtils/Messenging.html#method-i-default_instance","()","<p>default_instance method\n<p>Returns a default instance of LoggerDelegator that delegates to STDOUT\nonly. @return …\n"],["delegate","CLIUtils::LoggerDelegator","CLIUtils/LoggerDelegator.html#method-c-delegate","()","<p>delegate_all method\n<p>Creates delegator methods for all of the methods on IO. @return void\n"],["delete_section","CLIUtils::Configurator","CLIUtils/Configurator.html#method-i-delete_section","(section_name)","<p>delete_section method\n<p>Removes a section to the config file (if it exists). @param section_name\nThe section …\n"],["detach","CLIUtils::LoggerDelegator","CLIUtils/LoggerDelegator.html#method-i-detach","(target)","<p>detach method\n<p>Detaches a delegation target. @return void\n"],["error","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-error","(m)","<p>error method\n<p>Outputs a formatted-red error message. @param m The message to output\n@return Void\n"],["green","String","String.html#method-i-green","()",""],["included","CLIUtils::Configuration","CLIUtils/Configuration.html#method-c-included","(k)","<p>\n<p>Methods\n<p>\n"],["included","CLIUtils::Messenging","CLIUtils/Messenging.html#method-c-included","(k)","<p>\n<p>Methods\n<p>\n"],["included","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-c-included","(k)","<p>\n<p>Methods\n<p>—————————————————-\n"],["info","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-info","(m)","<p>info method\n<p>Outputs a formatted-blue informational message. @param m The message to\noutput @return Void …\n"],["info_block","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-info_block","(m1, m2 = 'Done.', multiline = false)","<p>info_block method\n<p>Wraps a block in an opening and closing info message. @param m1 The opening\nmessage …\n"],["ingest_prefs","CLIUtils::Configurator","CLIUtils/Configurator.html#method-i-ingest_prefs","(prefs)","<p>ingest_prefs method\n<p>Ingests a Prefs class and adds its answers to the configuration data.\n@param prefs …\n"],["load_configuration","CLIUtils::Configuration","CLIUtils/Configuration.html#method-i-load_configuration","(path)","<p>load_configuration method\n<p>Initializes a Configurator with the passed filepath. @param path The path\nto …\n"],["log","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-log","(m)","<p>log method\n<p>Empty method so that Messenging doesn&#39;t freak out when passed a debug\nmessage. @return …\n"],["messenger","CLIUtils::Messenging","CLIUtils/Messenging.html#method-i-messenger","()","<p>messenger method\n<p>Singleton method to return (or initialize, if needed) a LoggerDelegator.\n@return LoggerDelegator …\n"],["method_missing","CLIUtils::Configurator","CLIUtils/Configurator.html#method-i-method_missing","(name, *args, &block)","<p>method_missing method\n<p>Allows this module to return data from the config Hash when given a method\nname …\n"],["new","CLIUtils::Configurator","CLIUtils/Configurator.html#method-c-new","(path)","<p>\n<p>Methods\n<p>\n"],["new","CLIUtils::LoggerDelegator","CLIUtils/LoggerDelegator.html#method-c-new","(*targets)","<p>\n<p>Methods\n<p>\n"],["new","CLIUtils::Prefs","CLIUtils/Prefs.html#method-c-new","(data)","<p>\n<p>Methods\n<p>\n"],["prompt","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-prompt","(prompt, default = nil, start_dir = '')","<p>prompt method\n<p>Outputs a prompt, collects the user&#39;s response, and returns it. @param\nprompt The prompt …\n"],["purple","String","String.html#method-i-purple","()",""],["red","String","String.html#method-i-red","()",""],["reset","CLIUtils::Configurator","CLIUtils/Configurator.html#method-i-reset","()","<p>reset method\n<p>Clears the configuration data. @return Void\n"],["save","CLIUtils::Configurator","CLIUtils/Configurator.html#method-i-save","()","<p>save method\n<p>Saves the configuration data to the previously stored flat file. @return\nVoid\n"],["section","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-section","(m)","<p>section method\n<p>Outputs a formatted-purple section message. @param m The message to output\n@return Void …\n"],["section_block","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-section_block","(m, multiline = true)","<p>section_block method\n<p>Wraps a block in an opening and closing section message. @param m1 The\nopening message …\n"],["success","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-success","(m)","<p>success method\n<p>Outputs a formatted-green success message. @param m The message to output\n@return Void …\n"],["warn","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-i-warn","(m)","<p>warning method\n<p>Outputs a formatted-yellow warning message. @param m The message to output\n@return Void …\n"],["white","String","String.html#method-i-white","()",""],["wrap","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-c-wrap","(on)","<p>wrap method\n<p>Toggles wrapping on or off @return Integer\n"],["wrap_at","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-c-wrap_at","(chars)","<p>wrap_at method\n<p>Sets the number of characters at which to wrap @return Integer\n"],["wrap_limit","CLIUtils::PrettyIO","CLIUtils/PrettyIO.html#method-c-wrap_limit","()","<p>wrap_limit method\n<p>Returns the current character wrap amount @return Integer\n"],["yellow","String","String.html#method-i-yellow","()",""],["README","","README_md.html","","<p>CLIUtils\n<p>CLIUtils is a library of functionality designed to alleviate common tasks\nand headaches when …\n"]]}}